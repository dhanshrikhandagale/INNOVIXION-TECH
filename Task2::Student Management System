package com.ig;

public class Course {
	private String courseCode;
    private String courseName;

    public Course(String courseCode, String courseName) {
        this.courseCode = courseCode;
        this.courseName = courseName;
    }

    public String getCourseCode() {
        return courseCode;
    }

    public String getCourseName() {
        return courseName;
    }
}

package com.ig;

import java.util.HashMap;
import java.util.Map;

public class Student {
	private String studentId;
    private String name;
    private Map<String, Double> grades; // Map<CourseCode, Grade>

    public Student(String studentId, String name) {
        this.studentId = studentId;
        this.name = name;
        this.grades = new HashMap<>();
    }

    public String getStudentId() {
        return studentId;
    }

    public String getName() {
        return name;
    }

    public void recordGrade(String courseCode, double grade) {
        grades.put(courseCode, grade);
    }

    public double calculateGPA() {
        if (grades.isEmpty()) {
            return 0.0; // No grades recorded
        }

        double totalGradePoints = 0.0;
        int totalCredits = 0;

        for (Map.Entry<String, Double> entry : grades.entrySet()) {
            String courseCode = entry.getKey();
            double grade = entry.getValue();

            // For simplicity, assume all courses have equal credit weight (1 credit)
            totalGradePoints += grade;
            totalCredits += 1;
        }

        return totalGradePoints / totalCredits;
    }
}


package com.ig;

public class StudentManagementApp {
	public static void main(String[] args) {
        StudentManagementSystem studentManagementSystem = new StudentManagementSystem();
        studentManagementSystem.start();
    }


}


package com.ig;

import java.util.ArrayList;
import java.util.Scanner;

public class StudentManagementSystem {
	private ArrayList<Student> students;
    private ArrayList<Course> courses;
    private Scanner scanner;

    public StudentManagementSystem() {
        this.students = new ArrayList<>();
        this.courses = new ArrayList<>();
        this.scanner = new Scanner(System.in);
    }

    public void start() {
        while (true) {
            System.out.println("\nStudent Management System");
            System.out.println("1. Add Student");
            System.out.println("2. Remove Student");
            System.out.println("3. Record Grade");
            System.out.println("4. Calculate GPA");
            System.out.println("5. Generate Report");
            System.out.println("6. Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    addStudent();
                    break;
                case 2:
                    removeStudent();
                    break;
                case 3:
                    recordGrade();
                    break;
                case 4:
                    calculateGPA();
                    break;
                case 5:
                    generateReport();
                    break;
                case 6:
                    System.out.println("Exiting the system. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private void addStudent() {
        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();

        Student student = new Student(studentId, name);
        students.add(student);

        System.out.println("Student added successfully.");
    }

    private void removeStudent() {
        if (students.isEmpty()) {
            System.out.println("No students available to remove.");
            return;
        }

        System.out.print("Enter student ID to remove: ");
        String studentIdToRemove = scanner.nextLine();

        for (Student student : students) {
            if (student.getStudentId().equalsIgnoreCase(studentIdToRemove)) {
                students.remove(student);
                System.out.println("Student removed successfully.");
                return;
            }
        }

        System.out.println("Student with ID '" + studentIdToRemove + "' not found.");
    }

    private void recordGrade() {
        if (students.isEmpty() || courses.isEmpty()) {
            System.out.println("Please add students and courses first.");
            return;
        }

        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();
        System.out.print("Enter course code: ");
        String courseCode = scanner.nextLine();

      
        Student selectedStudent = null;
        for (Student student : students) {
            if (student.getStudentId().equalsIgnoreCase(studentId)) {
                selectedStudent = student;
                break;
            }
        }

        Course selectedCourse = null;
        for (Course course : courses) {
            if (course.getCourseCode().equalsIgnoreCase(courseCode)) {
                selectedCourse = course;
                break;
            }
        }

        if (selectedStudent == null || selectedCourse == null) {
            System.out.println("Student or course not found.");
            return;
        }

        System.out.print("Enter grade (0-100): ");
        double grade = scanner.nextDouble();
        scanner.nextLine(); // Consume the newline character

        if (grade < 0 || grade > 100) {
            System.out.println("Invalid grade. Please enter a grade between 0 and 100.");
            return;
        }

        selectedStudent.recordGrade(selectedCourse.getCourseCode(), grade);
        System.out.println("Grade recorded successfully.");
    }

    private void calculateGPA() {
        if (students.isEmpty()) {
            System.out.println("No students available.");
            return;
        }

        System.out.print("Enter student ID: ");
        String studentId = scanner.nextLine();

        Student selectedStudent = null;
        for (Student student : students) {
            if (student.getStudentId().equalsIgnoreCase(studentId)) {
                selectedStudent = student;
                break;
            }
        }

        if (selectedStudent == null) {
            System.out.println("Student not found.");
            return;
        }

        double gpa = selectedStudent.calculateGPA();
        System.out.println("GPA for student " + selectedStudent.getName() + ": " + gpa);
    }

    private void generateReport() {
        if (students.isEmpty()) {
            System.out.println("No students available.");
            return;
        }

        System.out.println("Student Report:");
        for (Student student : students) {
            System.out.println("Student ID: " + student.getStudentId());
            System.out.println("Student Name: " + student.getName());
            System.out.println("GPA: " + student.calculateGPA());
            System.out.println("-------------------------------");
        }
    }
}

